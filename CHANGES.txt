# CHANGES.txt - Transcribe Voicemails Project

## Version 2.4.0 - 2025-06-17

### Context Extraction Improvement Plan

#### Planning and Analysis
- **Created spec/context_prompt_improvement.md**: Comprehensive plan for testing and improving context extraction
- **Analyzed current implementation**: Examined existing MEMO_PROMPT in post_process.py
- **Identified improvement areas**: Better pattern recognition for implicit context statements

#### Test Infrastructure
- **Created test/samples/ directory**: Organized location for context extraction test samples
- **Added 5 test samples**: Each testing different context scenarios
  - context_test_explicit.txt: Tests explicit "context" keyword
  - context_test_implicit.txt: Tests implicit context statement  
  - context_test_markers.txt: Tests begin/end context markers
  - context_test_multiple.txt: Tests multiple context references
  - context_test_no_context.txt: Tests handling of no context
- **Realistic formatting**: All samples reflect unpunctuated voice memo transcriptions

#### Test Script Implementation
- **Created test_context_extraction.py**: Automated testing of context extraction
- **Multiple prompt variations**: Tests 4 different prompt approaches
  - Current: Existing implementation
  - Enhanced: Better pattern recognition
  - Flexible: Multiple context indicators
  - Structured: Primary/secondary/fallback approach
- **Comprehensive analysis**: Extracts and compares context and title tags
- **Batch testing support**: Can test all variations with --all-variations flag

#### Key Findings Documented
- Current prompt relies heavily on explicit "context" keyword
- Need for better implicit context detection
- Importance of focusing on beginning of transcript
- Challenge of unpunctuated input text

#### Experimental Results
- **Tested 6 prompt variations**: From current baseline to improved versions
- **Best performer: Improved V4**: Achieved 80% accuracy (vs 60% baseline)
- **Identified remaining challenge**: False positive context extraction when none exists
- **Recommendation**: Improved V4 prompt shows significant enhancement potential

### Voice Memo Watcher Watch Mode

#### New --watch Feature
- **Added continuous monitoring mode**: Use `--watch` or `-W` to run continuously
- **Configurable check interval**: Use `--interval` or `-i` to set check frequency (default: 60 seconds)
- **Graceful shutdown**: Responds to Ctrl+C and SIGTERM signals
- **Comprehensive logging**: Debug and info level logging for monitoring
- **Summary statistics**: Tracks total files processed across all iterations
- **Responsive sleep**: Sleeps in 5-second increments for quick shutdown response

#### Usage Examples
```bash
# Run once (original behavior)
python voice_memo_watcher.py

# Watch mode - check every 60 seconds
python voice_memo_watcher.py --watch

# Watch mode with custom interval
python voice_memo_watcher.py --watch --interval 30

# Watch mode with verbose logging
python voice_memo_watcher.py --watch --verbose
```

## Version 2.3.0 - 2025-06-17

### Voice Memo Watcher Tool

#### New voice_memo_watcher.py Script
- **Automated voice memo processing**: Watches input directory and processes files through transcription pipeline
- **Smart file naming**: Extracts titles from transcripts or uses timestamps for filenames
- **M4A metadata support**: Extracts creation timestamps from M4A files using mutagen library
- **Directory organization**: Separates input, output, and transcript directories
- **Title extraction**: Parses `<title>` tags from transcripts for meaningful filenames
- **Filename sanitization**: Converts titles to safe filenames with proper character handling
- **Timestamp preservation**: Maintains original file creation times on output files
- **Environment configuration**: Reads directory paths from .env file with sensible defaults

#### Implementation Details
- Added mutagen dependency for M4A metadata extraction
- Processes audio files: mp3, m4a, wav, flac, ogg, opus
- Integrates with existing transcribe_pipeline.py for transcription
- Comprehensive error handling and logging
- Command-line arguments for directory overrides and verbose mode

#### Testing Infrastructure
- **test_voice_memo_watcher.py**: Comprehensive test suite with unit and integration tests
- **Safe file handling**: All tests use temporary directories and file copies
- **No data loss risk**: Tests never touch production directories or original files
- **Mock transcription**: Tests simulate transcription to avoid API calls
- **test_safe_run.py**: Safe integration test script for manual verification

#### .env Configuration
- Added voice memo directory configuration:
  - AUDIO_IN (default: voice_memo_inbox)
  - AUDIO_OUT (default: voice_memo_outbox)
  - TRANSCRIPT_OUT (default: voice_memo_transcripts)

#### Documentation Updates
- Updated spec/plan.md with comprehensive testing strategy section
- Added test safety features and execution instructions
- Documented environment variable handling for test isolation

## Version 2.2.0 - 2025-06-16

### Simplification & Pipeline Tool

#### New Streamlined Pipeline Tool
- **Added `pipeline.py`**: One-command tool for voice memo processing (audio → cleaned text)
- Automatic transcription with cost-effective models (gpt-4o-mini-transcribe)
- Built-in voice memo summarization with gpt-4.1-nano
- Date-organized output structure (`processed/YYYY-MM-DD/`)
- Preserves original filenames (audio.mp3 → audio.txt)
- Automatic cleanup of intermediate transcription files
- Quality presets: fast (default), balanced, high

#### Interface Simplification
- **Simplified `transcribe.py`**: Reduced from 10+ options to 6 core options
- **Simplified `post_process.py`**: Streamlined interface with essential options visible
- **Advanced mode**: Use `--advanced` flag to access full feature set
- **Better defaults**: Cost-effective models by default (gpt-4o-mini, gpt-4.1-nano)
- Clear guidance pointing users to appropriate tools for their use case

#### Documentation Overhaul
- **Quick Start section**: Three usage tiers prominently displayed
- **Pipeline examples**: Voice memo workflow featured first
- **Reorganized examples**: Simple → Standard → Advanced progression
- **Reduced complexity**: Moved advanced examples to dedicated section
- Clear tool selection guidance (pipeline vs individual tools)

#### Three Usage Tiers Established
1. **Simple Pipeline**: `pipeline.py` for voice memos (one command, optimized defaults)
2. **Standard Tools**: Simplified `transcribe.py` and `post_process.py` interfaces
3. **Advanced**: Full feature access via `--advanced` flag

### Standardization (from 2.1.1)
- Standardized output directory options across all scripts to use `-O, --output-dir`
- Updated `post_process.py` to use `--output-dir` instead of `--out-dir`
- Updated `transcribe.py` to use `--output-dir` instead of `--out-dir`
- Updated all documentation examples and help text to reflect new standardized option names

## Version 2.1.0 - 2025-06-15

### New Features

#### transcribe.py
- Added `-o/--out-dir` parameter to specify custom output directory for transcription files
- Added `--complex-json` flag to control JSON output generation (replaces automatic JSON creation)
- Enhanced output directory handling with automatic parent directory creation
- Updated help text and usage examples to reflect new options

#### post_process.py  
- Added `--out-dir` parameter for specifying output directory
- Added `--inplace` option for safe in-place file processing (overwrites input only on success)
- Added `-E/--extension` parameter to add suffix to output filenames before file extension
- Made output options mutually exclusive (--output, --out-dir, --inplace) for clarity
- Enhanced error handling and validation for output operations
- Updated documentation and usage examples

### New Test Suites

#### test_transcribe.py
- Comprehensive test suite for transcription accuracy validation
- Uses OpenAI text-to-speech API to generate known test audio content
- Tests both MP3 and WAV formats with multiple transcription models
- Validates JSON structure when using --complex-json flag
- Includes word-level accuracy metrics and name recognition testing
- Test audio files preserved as permanent fixtures in test_audio/ directory
- Added argument parsing with --regenerate and --debug options
- Replaced print statements with proper logging module usage
- **NEW**: Added automatic cleanup of generated .txt and .json files from test_audio directory
- **NEW**: Cleanup runs before and after tests to maintain clean test environment

#### test_output_options.py
- Dedicated test suite for new output directory and file options
- Tests transcribe.py --out-dir functionality with nested directory creation
- Tests post_process.py --out-dir, --extension, and --inplace options
- Validates error conditions and mutually exclusive option handling
- Includes edge case testing for deep directory paths and file permissions
- Uses temporary directories to avoid polluting the working directory
- **NEW**: Added automatic cleanup of generated .txt and .json files from test_audio directory
- **NEW**: Cleanup runs before and after tests to maintain clean test environment

### Documentation Updates

#### README.md
- Added comprehensive "Post-Processing" section with usage examples
- Updated "Output Options" section to include --out-dir parameter
- Enhanced "Testing" section with new test suite information
- Updated "Test Coverage" to reflect new functionality validation
- Added examples for all new command-line options

#### TESTING.md
- New comprehensive testing guide document
- Detailed explanation of test coverage and validation criteria
- Command-line options and usage examples for test suites
- Troubleshooting section for common testing issues
- Documentation of test file persistence and caching behavior

### Behavioral Changes

#### JSON Output (Breaking Change)
- **BEFORE**: transcribe.py automatically created both .txt and .json files for every transcription
- **AFTER**: transcribe.py only creates .txt files by default, requires --complex-json flag for JSON output
- This change reduces clutter and gives users explicit control over output formats

#### Output Directory Flexibility
- Both transcribe.py and post_process.py now support custom output directories
- Automatic creation of parent directories when they don't exist
- Maintains backward compatibility when no output directory is specified

### Technical Improvements

#### Code Quality
- Enhanced error handling and validation across both tools
- Improved logging with proper logging module usage instead of print statements
- Added comprehensive type hints and docstrings
- Better separation of concerns between file I/O and processing logic

#### Key Functions Added/Modified

**transcribe.py:**
- `transcribe_audio_file()`: Added `out_dir` parameter for custom output directories
- `parse_args()`: Added `--out-dir` and `--complex-json` argument parsing
- `main()`: Enhanced output directory handling and path resolution

**post_process.py:**
- `main_async()`: Complete restructure of output handling logic
- `parse_args()`: Added mutually exclusive output group with `--out-dir`, `--inplace`, `--extension`
- Enhanced file path generation with suffix insertion before extensions

**test_transcribe.py:**
- `setup_logging()`: Professional logging configuration
- `generate_test_audio_file()`: OpenAI TTS integration for test audio creation
- `run_transcription()`: Subprocess management for transcription testing
- `validate_transcription_output()`: Comprehensive output validation
- `calculate_word_accuracy()`: Accuracy metrics calculation
- `parse_args()`: Argument parsing with `--regenerate` and `--debug` options
- `cleanup_generated_files()`: **NEW** - Automatic cleanup of .txt and .json files from test_audio directory

**test_output_options.py:**
- `test_transcribe_output_directory()`: Output directory functionality validation
- `test_post_process_extension_suffix()`: Extension suffix testing
- `test_post_process_inplace()`: In-place processing safety testing
- `test_error_conditions()`: Edge case and error condition testing
- `cleanup_test_audio_generated_files()`: **NEW** - Automatic cleanup of .txt and .json files from test_audio directory

#### Testing Infrastructure
- Robust test framework with permanent test fixtures
- Integration with OpenAI APIs for realistic test scenarios
- Comprehensive validation of output formats and file structures
- Automated test discovery and execution capabilities
- Word-level accuracy metrics and JSON structure validation
- Organized all test files in dedicated `test/` directory for better project structure

### Dependencies
- No new external dependencies added
- Leverages existing OpenAI, pydub, and other established dependencies
- Test suites use built-in Python modules where possible

### File Statistics
- **Modified Files**: 7 files changed, 2,054 insertions(+), 334 deletions(-)
  - transcribe.py: ~76 lines added (output directory support, JSON control)
  - post_process.py: Major enhancements (~585 lines, restructured output handling)
  - README.md: ~91 lines added (documentation for new features)
  - pyproject.toml: 5 lines added (dependency updates)
  - uv.lock: 1,140 lines added (dependency lock file updates)
  - verify_text_integrity.py: ~490 lines enhanced
  - .gitignore: 1 line added

- **New Files Added**: 1,128 total lines
  - test/test_transcribe.py: 520 lines (comprehensive transcription testing)
  - test/test_output_options.py: 468 lines (output options testing)  
  - TESTING.md: 140 lines (testing documentation)
  - test/test_audio/: Directory containing permanent test audio fixtures

### Git History Integration
- Based on commit cf7b836: "add post-processing tools and dependencies"
- Represents significant expansion of testing infrastructure and user control features

### Migration Guide

#### For existing users:
1. **JSON Output Change**: Add `--complex-json` flag if you need JSON files with timestamps
2. **Directory Organization**: Use `--out-dir` to organize outputs into specific directories
3. **Post-Processing**: Use new `--extension` option to add suffixes like "_cleaned" or "_processed"
4. **In-Place Processing**: Use `--inplace --verify` for safe file replacement

#### Examples of new usage patterns:
```bash
# Old: Always created both .txt and .json
python transcribe.py audio.mp3

# New: Only creates .txt (add --complex-json for JSON)  
python transcribe.py audio.mp3
python transcribe.py audio.mp3 --complex-json

# New: Organize outputs
python transcribe.py audio.mp3 --out-dir transcriptions/
python post_process.py transcript.txt --extension "_clean"
python post_process.py transcript.txt --inplace --verify
```

### Testing

All new functionality is covered by comprehensive test suites:
- Run `cd test && python test_transcribe.py` for transcription accuracy tests
- Run `cd test && python test_output_options.py` for output directory and file option tests
- Both test suites include debug logging and proper error reporting
- All test files organized in dedicated `test/` directory with `test_audio/` subdirectory for fixtures

---

## Previous Versions

### Version 2.0.0 - [Prior to current changes]
- Initial post-processing functionality
- Basic transcription capabilities
- Foundation for current enhancements