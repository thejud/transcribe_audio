# CHANGES.txt - Transcribe Voicemails Project

## Version 2.6.2 - 2025-01-24

### Fixed Background Execution and Output Redirection Issues
- **Problem**: voice_memo_watcher would hang when run in background or with output redirection
- **Solutions**:
  - Replaced print() statements with logger.info() or added flush=True to prevent buffering issues
  - Added SIGHUP signal handler for proper background execution support
  - Added --daemon flag that properly detaches from terminal and logs to file (~/.voice_memo_watcher.log)
  - Added -u flag to shebang line for unbuffered Python output
  - Error messages now properly go to stderr with flushing
- **Usage**: 
  - For background: `nohup ./voice_memo_watcher.py --watch &`
  - As daemon: `./voice_memo_watcher.py --daemon --watch`
  - With output redirection: `./voice_memo_watcher.py --watch > output.log 2>&1`

## Version 2.6.1 - 2025-01-23

### Fixed USB Drive Directory Notification Issue
- **Problem**: When USB drives were mounted, FSEvents only notified about directory creation, not existing files
- **Solution**: Added directory event handling to AudioFileHandler
  - `on_created` and `on_modified` now handle directory events
  - Directory events trigger scanning for existing audio files
  - Prevents missing files when USB drives are plugged in
  - Added `find_audio_files_in_directory` method for single directory scanning
  - Enhanced directory event handling to check parent/child directory relationships

### Fixed USB Drive Mount Detection Issue
- **Problem**: When USB directories became available, existing files weren't scanned
- **Solution**: Enhanced monitor mode to scan for files when directories become available
  - When a new directory is detected and starts being watched, it's immediately scanned
  - Existing files are processed before waiting for new file events
  - Prevents files from being missed when USB drives are mounted after monitoring starts

### Fixed Poison File Empty Transcript Issue  
- **Problem**: Some files generated empty transcripts but were still processed with empty content
- **Solution**: Added transcript validation in process_file method
  - Checks for empty or too-short transcripts (< 10 characters)
  - Creates quarantine directory for problematic files
  - Moves poison files to quarantine instead of output
  - Cleans up empty transcript files automatically
  - Better logging for troubleshooting transcript issues

### Fixed Empty Transcript Stack Trace Issue
- **Problem**: Pipeline failed with stack trace when transcription produced empty files
- **Solution**: Added empty file validation in transcribe_pipeline.py
  - Checks transcript content after successful transcription
  - Returns None (failure) for empty transcripts instead of passing to post-processing
  - Improved error messages to distinguish empty transcript errors
  - Prevents post_process.py ValueError from propagating as stack trace

### Code Refactoring and Organization
- **Improved code maintainability**: Refactored voice_memo_watcher.py for better organization
- **Extracted helper methods**: Broke down large methods into focused, single-purpose functions
  - `process_file()` reduced from 125 to 37 lines using 6 helper methods
  - `run_monitor_mode()` reduced from 140 to 37 lines using 5 helper methods
  - `main()` reduced from 95 to 12 lines using 5 helper methods
- **Eliminated code duplication**: Extracted common metadata extraction logic
- **Logical method grouping**: Organized methods by functionality with clear section comments
  - File Discovery Methods
  - Text Processing Methods  
  - Core Processing Methods
  - Run Mode Methods
  - Monitoring Helper Methods
  - Main Function and Helpers
- **Single Responsibility Principle**: Each method now has one clear purpose
- **Improved readability**: No method exceeds 60 lines, most under 30 lines
- **Maintained functionality**: All existing features preserved

### Testing Improvements
- Added comprehensive test for directory event handling
- Added test for empty transcript quarantine behavior
- All tests passing with new functionality

## Version 2.6.0 - 2025-06-20

### FSEvents Real-Time Monitoring & macOS Integration

#### Added FSEvents-based Real-Time Monitoring:

1. **FSEvents Monitor Mode (`--monitor`)**:
   - Real-time file detection using macOS FSEvents via `watchdog` library
   - Zero CPU usage when no files are present (unlike polling)
   - Immediate processing when audio files are added to input directories
   - Automatic handling of USB device mounting/unmounting
   - Intelligent duplicate processing prevention

2. **Enhanced USB Device Support**:
   - Automatically detects when USB directories become available
   - Gracefully handles device disconnection/reconnection
   - Processes existing files on startup, then monitors for new ones

3. **macOS Launch Agent Integration**:
   - Created Launch Agent plist templates for automatic startup
   - Two modes: continuous FSEvents monitoring and periodic processing
   - Better than cron: runs in user context with access to mounted volumes
   - Automatic restart and logging integration

4. **Command Line Enhancements**:
   - Added `--monitor` / `-M` flag for FSEvents mode
   - Mutually exclusive with `--watch` to prevent conflicting modes
   - Graceful fallback to watch mode if watchdog library not available

5. **Dependencies**:
   - Added `watchdog>=3.0.0` for FSEvents monitoring
   - Added `mutagen>=1.47.0` for audio metadata extraction

### Key Benefits:
- **Zero CPU usage** when idle (FSEvents vs polling)
- **Immediate processing** - no waiting for polling intervals
- **USB device awareness** - handles mounting/unmounting automatically
- **macOS integration** - Launch Agents for background operation
- **Backward compatibility** - existing functionality unchanged

### Usage Examples:

```bash
# FSEvents real-time monitoring (recommended)
python voice_memo_watcher.py --monitor

# Periodic polling (original behavior)
python voice_memo_watcher.py --watch --interval 60

# Single run (process existing files and exit)
python voice_memo_watcher.py

# Launch Agent setup for automatic startup
cp launch_agents/com.user.voicememo.monitor.plist ~/Library/LaunchAgents/
launchctl load ~/Library/LaunchAgents/com.user.voicememo.monitor.plist
```

## Version 2.5.0 - 2025-06-20

### Multiple Input Directory Support & Tool Consolidation

#### Enhanced voice_memo_watcher.py:

1. **Fixed Cross-Filesystem Issue**:
   - Replaced `Path.rename()` with `shutil.move()` to handle moves from USB drives to local storage
   - Eliminates "Invalid cross-device link" errors when moving files across filesystems

2. **Added Multiple Input Directory Support**:
   - Enhanced VoiceMemoWatcher class to accept multiple input directories
   - Supports USB voice memo devices with A, B, C, D folders
   - Maintains backward compatibility with single directory usage

3. **Environment Variable Enhancement**:
   - Added colon-separated path support in .env files
   - Example: AUDIO_IN=/Volumes/VoiceBox/A:/Volumes/VoiceBox/B:/Volumes/VoiceBox/C:/Volumes/VoiceBox/D
   - Backward compatible with single directory format

4. **Command Line Interface**:
   - Added support for multiple --audio-in arguments
   - Example: --audio-in /path/A --audio-in /path/B --audio-in /path/C --audio-in /path/D

5. **Updated Tests**:
   - Added comprehensive test coverage for multiple input directories
   - Tests for environment variable parsing (colon-separated and single)
   - Tests for non-existent directories
   - Tests for backward compatibility

6. **Documentation Updates**:
   - Created .env.example with multiple directory examples
   - Updated README.md with USB voice memo device workflow
   - Added configuration examples for colon-separated paths

7. **Code Cleanup**:
   - Removed redundant copy_audio_files.py tool (functionality integrated)
   - Removed associated test file
   - Formatted all code with black

### Key Benefits:
- Single tool handles complete workflow (copy + transcribe + organize)
- Supports USB voice memo devices with multiple directories out of the box
- Eliminates cross-filesystem move issues
- Maintains all existing functionality and backward compatibility
- Cleaner, more maintainable codebase

### Usage Examples:

```bash
# Environment variable (colon-separated)
AUDIO_IN=/Volumes/VoiceBox/A:/Volumes/VoiceBox/B:/Volumes/VoiceBox/C:/Volumes/VoiceBox/D

# Command line (multiple arguments)
python voice_memo_watcher.py --audio-in /Volumes/VoiceBox/A --audio-in /Volumes/VoiceBox/B --audio-in /Volumes/VoiceBox/C --audio-in /Volumes/VoiceBox/D

# Single directory (backward compatible)
python voice_memo_watcher.py --audio-in ~/voice_inbox
```

## Version 2.4.0 - 2025-06-17

### Context Extraction Improvement Plan

#### Planning and Analysis
- **Created spec/context_prompt_improvement.md**: Comprehensive plan for testing and improving context extraction
- **Analyzed current implementation**: Examined existing MEMO_PROMPT in post_process.py
- **Identified improvement areas**: Better pattern recognition for implicit context statements

#### Test Infrastructure
- **Created test/samples/ directory**: Organized location for context extraction test samples
- **Added 5 test samples**: Each testing different context scenarios
  - context_test_explicit.txt: Tests explicit "context" keyword
  - context_test_implicit.txt: Tests implicit context statement  
  - context_test_markers.txt: Tests begin/end context markers
  - context_test_multiple.txt: Tests multiple context references
  - context_test_no_context.txt: Tests handling of no context
- **Realistic formatting**: All samples reflect unpunctuated voice memo transcriptions

#### Test Script Implementation
- **Created test_context_extraction.py**: Automated testing of context extraction
- **Multiple prompt variations**: Tests 4 different prompt approaches
  - Current: Existing implementation
  - Enhanced: Better pattern recognition
  - Flexible: Multiple context indicators
  - Structured: Primary/secondary/fallback approach
- **Comprehensive analysis**: Extracts and compares context and title tags
- **Batch testing support**: Can test all variations with --all-variations flag

#### Key Findings Documented
- Current prompt relies heavily on explicit "context" keyword
- Need for better implicit context detection
- Importance of focusing on beginning of transcript
- Challenge of unpunctuated input text

#### Experimental Results
- **Tested 6 prompt variations**: From current baseline to improved versions
- **Best performer: Improved V4**: Achieved 80% accuracy (vs 60% baseline)
- **Identified remaining challenge**: False positive context extraction when none exists
- **Recommendation**: Improved V4 prompt shows significant enhancement potential

### Voice Memo Watcher Watch Mode

#### New --watch Feature
- **Added continuous monitoring mode**: Use `--watch` or `-W` to run continuously
- **Configurable check interval**: Use `--interval` or `-i` to set check frequency (default: 60 seconds)
- **Graceful shutdown**: Responds to Ctrl+C and SIGTERM signals
- **Comprehensive logging**: Debug and info level logging for monitoring
- **Summary statistics**: Tracks total files processed across all iterations
- **Responsive sleep**: Sleeps in 5-second increments for quick shutdown response

#### Usage Examples
```bash
# Run once (original behavior)
python voice_memo_watcher.py

# Watch mode - check every 60 seconds
python voice_memo_watcher.py --watch

# Watch mode with custom interval
python voice_memo_watcher.py --watch --interval 30

# Watch mode with verbose logging
python voice_memo_watcher.py --watch --verbose
```

## Version 2.3.0 - 2025-06-17

### Voice Memo Watcher Tool

#### New voice_memo_watcher.py Script
- **Automated voice memo processing**: Watches input directory and processes files through transcription pipeline
- **Smart file naming**: Extracts titles from transcripts or uses timestamps for filenames
- **M4A metadata support**: Extracts creation timestamps from M4A files using mutagen library
- **Directory organization**: Separates input, output, and transcript directories
- **Title extraction**: Parses `<title>` tags from transcripts for meaningful filenames
- **Filename sanitization**: Converts titles to safe filenames with proper character handling
- **Timestamp preservation**: Maintains original file creation times on output files
- **Environment configuration**: Reads directory paths from .env file with sensible defaults

#### Implementation Details
- Added mutagen dependency for M4A metadata extraction
- Processes audio files: mp3, m4a, wav, flac, ogg, opus
- Integrates with existing transcribe_pipeline.py for transcription
- Comprehensive error handling and logging
- Command-line arguments for directory overrides and verbose mode

#### Testing Infrastructure
- **test_voice_memo_watcher.py**: Comprehensive test suite with unit and integration tests
- **Safe file handling**: All tests use temporary directories and file copies
- **No data loss risk**: Tests never touch production directories or original files
- **Mock transcription**: Tests simulate transcription to avoid API calls
- **test_safe_run.py**: Safe integration test script for manual verification

#### .env Configuration
- Added voice memo directory configuration:
  - AUDIO_IN (default: voice_memo_inbox)
  - AUDIO_OUT (default: voice_memo_outbox)
  - TRANSCRIPT_OUT (default: voice_memo_transcripts)

#### Documentation Updates
- Updated spec/plan.md with comprehensive testing strategy section
- Added test safety features and execution instructions
- Documented environment variable handling for test isolation

## Version 2.2.0 - 2025-06-16

### Simplification & Pipeline Tool

#### New Streamlined Pipeline Tool
- **Added `pipeline.py`**: One-command tool for voice memo processing (audio → cleaned text)
- Automatic transcription with cost-effective models (gpt-4o-mini-transcribe)
- Built-in voice memo summarization with gpt-4.1-nano
- Date-organized output structure (`processed/YYYY-MM-DD/`)
- Preserves original filenames (audio.mp3 → audio.txt)
- Automatic cleanup of intermediate transcription files
- Quality presets: fast (default), balanced, high

#### Interface Simplification
- **Simplified `transcribe.py`**: Reduced from 10+ options to 6 core options
- **Simplified `post_process.py`**: Streamlined interface with essential options visible
- **Advanced mode**: Use `--advanced` flag to access full feature set
- **Better defaults**: Cost-effective models by default (gpt-4o-mini, gpt-4.1-nano)
- Clear guidance pointing users to appropriate tools for their use case

#### Documentation Overhaul
- **Quick Start section**: Three usage tiers prominently displayed
- **Pipeline examples**: Voice memo workflow featured first
- **Reorganized examples**: Simple → Standard → Advanced progression
- **Reduced complexity**: Moved advanced examples to dedicated section
- Clear tool selection guidance (pipeline vs individual tools)

#### Three Usage Tiers Established
1. **Simple Pipeline**: `pipeline.py` for voice memos (one command, optimized defaults)
2. **Standard Tools**: Simplified `transcribe.py` and `post_process.py` interfaces
3. **Advanced**: Full feature access via `--advanced` flag

### Standardization (from 2.1.1)
- Standardized output directory options across all scripts to use `-O, --output-dir`
- Updated `post_process.py` to use `--output-dir` instead of `--out-dir`
- Updated `transcribe.py` to use `--output-dir` instead of `--out-dir`
- Updated all documentation examples and help text to reflect new standardized option names

## Version 2.1.0 - 2025-06-15

### New Features

#### transcribe.py
- Added `-o/--out-dir` parameter to specify custom output directory for transcription files
- Added `--complex-json` flag to control JSON output generation (replaces automatic JSON creation)
- Enhanced output directory handling with automatic parent directory creation
- Updated help text and usage examples to reflect new options

#### post_process.py  
- Added `--out-dir` parameter for specifying output directory
- Added `--inplace` option for safe in-place file processing (overwrites input only on success)
- Added `-E/--extension` parameter to add suffix to output filenames before file extension
- Made output options mutually exclusive (--output, --out-dir, --inplace) for clarity
- Enhanced error handling and validation for output operations
- Updated documentation and usage examples

### New Test Suites

#### test_transcribe.py
- Comprehensive test suite for transcription accuracy validation
- Uses OpenAI text-to-speech API to generate known test audio content
- Tests both MP3 and WAV formats with multiple transcription models
- Validates JSON structure when using --complex-json flag
- Includes word-level accuracy metrics and name recognition testing
- Test audio files preserved as permanent fixtures in test_audio/ directory
- Added argument parsing with --regenerate and --debug options
- Replaced print statements with proper logging module usage
- **NEW**: Added automatic cleanup of generated .txt and .json files from test_audio directory
- **NEW**: Cleanup runs before and after tests to maintain clean test environment

#### test_output_options.py
- Dedicated test suite for new output directory and file options
- Tests transcribe.py --out-dir functionality with nested directory creation
- Tests post_process.py --out-dir, --extension, and --inplace options
- Validates error conditions and mutually exclusive option handling
- Includes edge case testing for deep directory paths and file permissions
- Uses temporary directories to avoid polluting the working directory
- **NEW**: Added automatic cleanup of generated .txt and .json files from test_audio directory
- **NEW**: Cleanup runs before and after tests to maintain clean test environment

### Documentation Updates

#### README.md
- Added comprehensive "Post-Processing" section with usage examples
- Updated "Output Options" section to include --out-dir parameter
- Enhanced "Testing" section with new test suite information
- Updated "Test Coverage" to reflect new functionality validation
- Added examples for all new command-line options

#### TESTING.md
- New comprehensive testing guide document
- Detailed explanation of test coverage and validation criteria
- Command-line options and usage examples for test suites
- Troubleshooting section for common testing issues
- Documentation of test file persistence and caching behavior

### Behavioral Changes

#### JSON Output (Breaking Change)
- **BEFORE**: transcribe.py automatically created both .txt and .json files for every transcription
- **AFTER**: transcribe.py only creates .txt files by default, requires --complex-json flag for JSON output
- This change reduces clutter and gives users explicit control over output formats

#### Output Directory Flexibility
- Both transcribe.py and post_process.py now support custom output directories
- Automatic creation of parent directories when they don't exist
- Maintains backward compatibility when no output directory is specified

### Technical Improvements

#### Code Quality
- Enhanced error handling and validation across both tools
- Improved logging with proper logging module usage instead of print statements
- Added comprehensive type hints and docstrings
- Better separation of concerns between file I/O and processing logic

#### Key Functions Added/Modified

**transcribe.py:**
- `transcribe_audio_file()`: Added `out_dir` parameter for custom output directories
- `parse_args()`: Added `--out-dir` and `--complex-json` argument parsing
- `main()`: Enhanced output directory handling and path resolution

**post_process.py:**
- `main_async()`: Complete restructure of output handling logic
- `parse_args()`: Added mutually exclusive output group with `--out-dir`, `--inplace`, `--extension`
- Enhanced file path generation with suffix insertion before extensions

**test_transcribe.py:**
- `setup_logging()`: Professional logging configuration
- `generate_test_audio_file()`: OpenAI TTS integration for test audio creation
- `run_transcription()`: Subprocess management for transcription testing
- `validate_transcription_output()`: Comprehensive output validation
- `calculate_word_accuracy()`: Accuracy metrics calculation
- `parse_args()`: Argument parsing with `--regenerate` and `--debug` options
- `cleanup_generated_files()`: **NEW** - Automatic cleanup of .txt and .json files from test_audio directory

**test_output_options.py:**
- `test_transcribe_output_directory()`: Output directory functionality validation
- `test_post_process_extension_suffix()`: Extension suffix testing
- `test_post_process_inplace()`: In-place processing safety testing
- `test_error_conditions()`: Edge case and error condition testing
- `cleanup_test_audio_generated_files()`: **NEW** - Automatic cleanup of .txt and .json files from test_audio directory

#### Testing Infrastructure
- Robust test framework with permanent test fixtures
- Integration with OpenAI APIs for realistic test scenarios
- Comprehensive validation of output formats and file structures
- Automated test discovery and execution capabilities
- Word-level accuracy metrics and JSON structure validation
- Organized all test files in dedicated `test/` directory for better project structure

### Dependencies
- No new external dependencies added
- Leverages existing OpenAI, pydub, and other established dependencies
- Test suites use built-in Python modules where possible

### File Statistics
- **Modified Files**: 7 files changed, 2,054 insertions(+), 334 deletions(-)
  - transcribe.py: ~76 lines added (output directory support, JSON control)
  - post_process.py: Major enhancements (~585 lines, restructured output handling)
  - README.md: ~91 lines added (documentation for new features)
  - pyproject.toml: 5 lines added (dependency updates)
  - uv.lock: 1,140 lines added (dependency lock file updates)
  - verify_text_integrity.py: ~490 lines enhanced
  - .gitignore: 1 line added

- **New Files Added**: 1,128 total lines
  - test/test_transcribe.py: 520 lines (comprehensive transcription testing)
  - test/test_output_options.py: 468 lines (output options testing)  
  - TESTING.md: 140 lines (testing documentation)
  - test/test_audio/: Directory containing permanent test audio fixtures

### Git History Integration
- Based on commit cf7b836: "add post-processing tools and dependencies"
- Represents significant expansion of testing infrastructure and user control features

### Migration Guide

#### For existing users:
1. **JSON Output Change**: Add `--complex-json` flag if you need JSON files with timestamps
2. **Directory Organization**: Use `--out-dir` to organize outputs into specific directories
3. **Post-Processing**: Use new `--extension` option to add suffixes like "_cleaned" or "_processed"
4. **In-Place Processing**: Use `--inplace --verify` for safe file replacement

#### Examples of new usage patterns:
```bash
# Old: Always created both .txt and .json
python transcribe.py audio.mp3

# New: Only creates .txt (add --complex-json for JSON)  
python transcribe.py audio.mp3
python transcribe.py audio.mp3 --complex-json

# New: Organize outputs
python transcribe.py audio.mp3 --out-dir transcriptions/
python post_process.py transcript.txt --extension "_clean"
python post_process.py transcript.txt --inplace --verify
```

### Testing

All new functionality is covered by comprehensive test suites:
- Run `cd test && python test_transcribe.py` for transcription accuracy tests
- Run `cd test && python test_output_options.py` for output directory and file option tests
- Both test suites include debug logging and proper error reporting
- All test files organized in dedicated `test/` directory with `test_audio/` subdirectory for fixtures

## Version 2.6.3 - 2025-06-28

### Fixed File Detection Issue in Monitor Mode
- **Problem**: Files were incorrectly marked as processed and not detected on subsequent directory events
- **Root Cause**: The processed_files set only tracked file paths without considering modification times
- **Solution**: Changed processed_files from set to dict to store file paths with modification times
- **Benefits**: 
  - Now properly detects when a file has been modified since last processing
  - Handles Apple Voice Memo files with duplicate names but different timestamps
  - Maintains quarantine functionality to prevent costly reprocessing of problematic files
- **Technical Changes**:
  - processed_files now stores {file_path: modification_time} mappings
  - Added modification time comparison before skipping files
  - Enhanced logging to show when files are skipped or have been modified
  - Preserved existing quarantine logic for poison file protection
  - Fixed transcribe_pipeline.py path resolution to work from any directory
  - Added test_modification_time_tracking test to verify the new behavior
  - All existing tests continue to pass

---

## Previous Versions

### Version 2.0.0 - [Prior to current changes]
- Initial post-processing functionality
- Basic transcription capabilities
- Foundation for current enhancements